<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<head>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
  <script type="text/javascript" src="turtle.js"></script>
  <script type="text/javascript" src="http://yui.yahooapis.com/3.7.3/build/yui/yui-min.js"></script>
</head>

<body onload="draw(1)">

<p class='yui3-skin-sam'>
        <label for="slider1_value">Value: </label>
            <input id="slider1_value" value="0">
        <span class="slider1_slider"></span>
        <label for="slider2_value">Value: </label>
            <input id="slider2_value" value="0">
        <span class="slider2_slider"></span>
</p>

  <a href="#" onclick="draw(0)">0</a> &nbsp; &nbsp; 
 <a href="#" onclick="draw(1)">1</a> &nbsp; &nbsp; 
 <a href="#" onclick="draw(2)">2</a> &nbsp; &nbsp; 
 <a href="#" onclick="draw(3)">3</a> &nbsp; &nbsp; 
 <a href="#" onclick="draw(4)">4</a> &nbsp; &nbsp; 
 <a href="#" onclick="draw(5)">5</a> &nbsp; &nbsp;
 <a href="#" onclick="draw(6)">6</a> &nbsp; &nbsp; 
 <a href="#" onclick="draw(7)">7</a> &nbsp; &nbsp;  
 <canvas id="canvas" width="100" height="100">
</body>
<script type="text/javascript">
var canvas = document.getElementById('canvas');
var turtle = new CanvasTurtle(canvas);
var slider1; var slider2;
 
YUI().use("slider", function (Y) {

function sliderInit() {
slider1 = new Y.Slider();
slider2 = new Y.Slider();

// Link the input value to the Slider
input1 = Y.one( "#slider1_value" );
input1.setData( { slider: slider1 } );

// Pass the input as the 'this' object inside updateInput
slider1.after( "valueChange", updateInput, input1 );
slider1.after( "valueChange", redraw, input1 );
input1.on( "keyup", updateSlider );

input2 = Y.one( "#slider1_value" );
input2.setData( { slider: slider2 } );

slider2.after( "valueChange", updateInput, input2 );
slider2.after( "valueChange", redraw, input2 );
input2.on( "keyup", updateSlider );

    
// Render the Slider next to the input
slider1.render('.slider1_slider')
slider2.render('.slider2_slider')


}
// Function to pass input value back to the Slider
function updateSlider( e ) {
    var data   = this.getData(),
        slider = data.slider,
        value  = parseInt( this.get( "value" ), 10 );

    if ( data.wait ) {
        data.wait.cancel();
    }

    // Update the Slider on a delay to allow time for typing
    data.wait = Y.later( 200, slider, function () {
        data.wait = null;
        this.set( "value", value );
    } );
}

// Function to update the input value from the Slider value
function updateInput( e ) {
    this.set( "value", e.newVal );
}

sliderInit();

});


// yes wanting lisp and macros right now
function filled_triangle(ink, alpha, length) {
    turtle.filling(ink, alpha, function() { 
        turtle.fd(length); turtle.rt(90);
        turtle.fd(length); turtle.rt(90);
        turtle.fd(length); turtle.rt(90);
        turtle.fd(length); turtle.rt(90);
});
}

function triangle(length) {
   turtle.fd(length); turtle.rt(90);
   turtle.fd(length); turtle.rt(90);
   turtle.fd(length); turtle.rt(90);
   turtle.fd(length); turtle.rt(90);
}

function draw_star(level, length) {
   var m = length / (2 * Math.cos(d2r(30)));
//   turtle.circle(5); // debug aid
   turtle.push();
   turtle.jump(m);
   turtle.rt(150 + slider1.getValue())	;
   filled_triangle("red", level / 10, length);
   turtle.restore();
   turtle.rt(180);
   turtle.jump(m);
   turtle.rt(150);
   filled_triangle("blue", level / 10, length);
   if (level > 0) {
     turtle.restore();
     draw_star(level - 1, length / 2);
     for (var i = 0;i<6;i++) {
       turtle.restore();
       turtle.rt(60 * i + 30 		     + slider2.getValue()  );
       turtle.jump(length / 2 );
       turtle.rt(30);			     
       draw_star(level - 1, length / 4);
      }
   }
   turtle.pop();
}

var nn;

function draw (n) {
  nn = n;
  adjust();
  redraw();
}

function redraw() {
  clear();
  turtle.jumpto(canvas.width * .5, canvas.height * .5);
  turtle.aim(-90);			     
  draw_star(nn, 600);
}

</script>

